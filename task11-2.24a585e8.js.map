{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,S,oDAOAC,EAAAC,KAAKC,OAAOC,iBAAiB,UAe7BC,eAA6BC,GAK3B,GAJAC,OAAOC,SAAS,EAAG,GACnBF,EAAEG,iBACFC,EAAaJ,EAAEK,OAAOC,YAAYC,MAEf,KAAfH,GAA2C,KAAtBA,EAAWI,OAGlC,OAFAb,EAAAC,KAAKa,UAAUC,UAAY,QAC3BC,EAAAC,GAASC,OAAOC,KAAK,yCAIvB,IACE,MAAMC,QAAiB,EAAAtB,EAAAuB,UAASZ,EAdZ,IAepB,GAAkC,IAA9BW,EAASE,KAAKC,KAAKC,OAMrB,OALAxB,EAAAC,KAAKa,UAAUC,UAAY,QAE3BC,EAAAC,GAASC,OAAOC,KACd,4EAKJ,MACEG,MAAMC,KAAEA,IACNH,EACEK,EAAUF,EAAKG,KACnB,EAACC,aACCA,EAAYC,cACZA,EAAaC,KACbA,EAAIC,MACJA,EAAKC,MACLA,EAAKC,SACLA,EAAQC,UACRA,MAEA,EAAAC,EAAAC,cACER,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,KAEJG,KAAK,IACPpC,EAAAC,KAAKa,UAAUC,UAAYU,EAC3BY,KAAO,EACPC,EAASC,UACTvB,EAAAC,GAASC,OAAOsB,QACd,oBAAoBpB,EAASE,KAAKmB,qBAEhCrB,EAASE,KAAKmB,WArDE,IAsDhBC,EAASC,QAAQ3C,EAAAC,KAAK2C,OAExBC,EAAapC,C,CACb,MAAOqC,GACT9B,EAAAC,GAASC,OAAO6B,QAAQ,mC,KArE5B,IAAIT,EAAW,IAAItB,EAAAgC,GAAJ,CAAmB,aAAc,CAC9CC,aAAc,MAOhB,MAAMP,EAAW,IAAIQ,sBAwErB,SAAyBC,GACrBA,EAAQC,SAAQhD,MAAMiD,IAK1B,GAAIA,EAAMC,eAAe,CACvBjB,MAAO,EACP,IACE,MAAMjB,QAAiB,EAAAtB,EAAAuB,UAASwB,EA9EZ,GA8E2CR,OAE7Df,MAAMC,KAAEA,IACNH,EACEK,EAAUF,EAAKG,KACnB,EAACC,aACCA,EAAYC,cACZA,EAAaC,KACbA,EAAIC,MACJA,EAAKC,MACLA,EAAKC,SACLA,EAAQC,UACRA,MAEA,EAAAC,EAAAC,cACER,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,KAEJG,KAAK,IACPpC,EAAAC,KAAKa,UAAUyC,mBAAmB,YAAa9B,GAC/Ca,EAASC,UAELnB,EAASoC,OAAOC,OAAOpB,MACvBjB,EAASE,KAAKmB,UAAYrB,EAASoC,OAAOC,OAAOC,WACnDhB,EAASiB,UAAU3D,EAAAC,KAAK2C,OACxB5B,EAAAC,GAASC,OAAOC,KACd,8D,CAGJ,MAAO2B,GACP9C,EAAAC,KAAK2D,YAAYC,UAAUC,IAAI,mBAC/B9C,EAAAC,GAASC,OAAOC,KACd,6D,QA1HO,CACT4C,WAAY,UAIhB,IAAIlB,EACApC","sources":["src/js/app-scroll.js"],"sourcesContent":["import { getFetch } from './img-api';\nimport { createMarkup } from './markup';\nimport { refs } from './refs';\nimport Notiflix from 'notiflix';\nimport SimpleLightbox from 'simplelightbox';\nimport 'simplelightbox/dist/simple-lightbox.min.css';\n\nrefs.formEl.addEventListener('submit', handlerSubmit);\n\nlet lightbox = new SimpleLightbox('.gallery a', {\n  captionDelay: 250,\n});\n\nlet option = {\n    rootMargin: '300px',\n  };\n  \nconst observer = new IntersectionObserver(handlerLoadMore, option);\nlet queryValue;\nlet inputValue;\nlet totalNumberOfPges = 20;\n\nasync function handlerSubmit(e) {\n  window.scrollTo(0, 0);\n  e.preventDefault();\n  inputValue = e.target.searchQuery.value;\n\n  if (inputValue === '' || inputValue.trim() === '') {\n    refs.galleryEl.innerHTML = '';\n    Notiflix.Notify.info('Your query is empty. Please try again');\n    return;\n  }\n\n  try {\n    const response = await getFetch(inputValue, totalNumberOfPges);\n    if (response.data.hits.length === 0) {\n      refs.galleryEl.innerHTML = '';\n\n      Notiflix.Notify.info(\n        'Sorry, there are no images matching your search query. Please try again.'\n      );\n      return;\n    }\n\n    const {\n      data: { hits },\n    } = response;\n    const gallery = hits.map(\n      ({\n        webformatURL,\n        largeImageURL,\n        tags,\n        likes,\n        views,\n        comments,\n        downloads,\n      }) =>\n        createMarkup(\n          webformatURL,\n          largeImageURL,\n          tags,\n          likes,\n          views,\n          comments,\n          downloads\n        )\n    ).join('');\n    refs.galleryEl.innerHTML = gallery;\n    page = 1;\n    lightbox.refresh();\n    Notiflix.Notify.success(\n      `Hooray! We found ${response.data.totalHits} images.`\n    );\n    if (response.data.totalHits >= totalNumberOfPges) {\n        observer.observe(refs.guard);\n      }\n      queryValue = inputValue;\n    } catch (error) {\n    Notiflix.Notify.failure('ERROR!!! Something went wrong!!!');\n  }\n\n \n  \n  \n  // console.log(refs.guard);\n  \n \n}\n\nfunction handlerLoadMore(entries){\n    entries.forEach(async entry=>{\n    //   console.log(entry);\n    //   console.log(page);\n    //   console.log(totalNumberOfPges);\n    //   console.log(queryValue);\nif (entry.isIntersecting){\n  page +=1\n  try {\n    const response = await getFetch(queryValue, totalNumberOfPges, page);\n    const {\n      data: { hits },\n    } = response;\n    const gallery = hits.map(\n      ({\n        webformatURL,\n        largeImageURL,\n        tags,\n        likes,\n        views,\n        comments,\n        downloads,\n      }) =>\n        createMarkup(\n          webformatURL,\n          largeImageURL,\n          tags,\n          likes,\n          views,\n          comments,\n          downloads\n        )\n    ).join('');\n    refs.galleryEl.insertAdjacentHTML('beforeend', gallery);\n    lightbox.refresh();\n\n    if (response.config.params.page >=\n        response.data.totalHits / response.config.params.per_page) {\n      observer.unobserve(refs.guard);\n      Notiflix.Notify.info(\n        \"We're sorry, but you've reached the end of search results.\"\n      );\n    }\n  } catch (error) {\n    refs.btnLoadMore.classList.add('visually-hidden');\n    Notiflix.Notify.info(\n      \"We're sorry, but you've reached the end of search results.\"\n    );\n  }\n}\n    });\n}"],"names":["$1JxcI","parcelRequire","$krGWQ","refs","formEl","addEventListener","async","e","window","scrollTo","preventDefault","$1636da505436bcd4$var$inputValue","target","searchQuery","value","trim","galleryEl","innerHTML","$parcel$interopDefault","$7Y9D8","Notify","info","response","getFetch","data","hits","length","gallery","map","webformatURL","largeImageURL","tags","likes","views","comments","downloads","$3huUq","createMarkup","join","page","$1636da505436bcd4$var$lightbox","refresh","success","totalHits","$1636da505436bcd4$var$observer","observe","guard","$1636da505436bcd4$var$queryValue","error","failure","$fZKcF","captionDelay","IntersectionObserver","entries","forEach","entry","isIntersecting","insertAdjacentHTML","config","params","per_page","unobserve","btnLoadMore","classList","add","rootMargin"],"version":3,"file":"task11-2.24a585e8.js.map"}